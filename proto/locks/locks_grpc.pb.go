// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: locks/locks.proto

package locks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocksClient is the client API for Locks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocksClient interface {
	SetLocks(ctx context.Context, in *LocksRequest, opts ...grpc.CallOption) (*LocksResponse, error)
	ReleaseLocks(ctx context.Context, in *LocksRequest, opts ...grpc.CallOption) (*LocksResponse, error)
}

type locksClient struct {
	cc grpc.ClientConnInterface
}

func NewLocksClient(cc grpc.ClientConnInterface) LocksClient {
	return &locksClient{cc}
}

func (c *locksClient) SetLocks(ctx context.Context, in *LocksRequest, opts ...grpc.CallOption) (*LocksResponse, error) {
	out := new(LocksResponse)
	err := c.cc.Invoke(ctx, "/pb.Locks/SetLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksClient) ReleaseLocks(ctx context.Context, in *LocksRequest, opts ...grpc.CallOption) (*LocksResponse, error) {
	out := new(LocksResponse)
	err := c.cc.Invoke(ctx, "/pb.Locks/ReleaseLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocksServer is the server API for Locks service.
// All implementations should embed UnimplementedLocksServer
// for forward compatibility
type LocksServer interface {
	SetLocks(context.Context, *LocksRequest) (*LocksResponse, error)
	ReleaseLocks(context.Context, *LocksRequest) (*LocksResponse, error)
}

// UnimplementedLocksServer should be embedded to have forward compatible implementations.
type UnimplementedLocksServer struct {
}

func (UnimplementedLocksServer) SetLocks(context.Context, *LocksRequest) (*LocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocks not implemented")
}
func (UnimplementedLocksServer) ReleaseLocks(context.Context, *LocksRequest) (*LocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLocks not implemented")
}

// UnsafeLocksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocksServer will
// result in compilation errors.
type UnsafeLocksServer interface {
	mustEmbedUnimplementedLocksServer()
}

func RegisterLocksServer(s grpc.ServiceRegistrar, srv LocksServer) {
	s.RegisterService(&Locks_ServiceDesc, srv)
}

func _Locks_SetLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServer).SetLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Locks/SetLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServer).SetLocks(ctx, req.(*LocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locks_ReleaseLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServer).ReleaseLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Locks/ReleaseLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServer).ReleaseLocks(ctx, req.(*LocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Locks_ServiceDesc is the grpc.ServiceDesc for Locks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Locks",
	HandlerType: (*LocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLocks",
			Handler:    _Locks_SetLocks_Handler,
		},
		{
			MethodName: "ReleaseLocks",
			Handler:    _Locks_ReleaseLocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locks/locks.proto",
}
